#ifndef GENERATED_ASN1SCC_FAULT_INJECTION_MESSAGES_H
#define GENERATED_ASN1SCC_FAULT_INJECTION_MESSAGES_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef enum {
    setOperation = 0,
    xorOperation = 1,
    orOperation = 2
} MaskOperationASN;

#define MaskOperationASN_REQUIRED_BYTES_FOR_ENCODING       1 
#define MaskOperationASN_REQUIRED_BITS_FOR_ENCODING        2
#define MaskOperationASN_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define MaskOperationASN_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define MaskOperationASN_REQUIRED_BYTES_FOR_XER_ENCODING   64

void MaskOperationASN_Initialize(MaskOperationASN* pVal);
flag MaskOperationASN_IsConstraintValid(const MaskOperationASN* val, int* pErrCode);
#ifndef ERR_MaskOperationASN_unknown_enumeration_value 
#define ERR_MaskOperationASN_unknown_enumeration_value		1002  /**/
#endif
#ifndef ERR_MaskOperationASN 
#define ERR_MaskOperationASN		1001  /**/
#endif

typedef enum {
    waitingConf = 0,
    sendingActions = 1,
    actionsReceived = 2
} ExchangeStatusEnumASN;

#define ExchangeStatusEnumASN_REQUIRED_BYTES_FOR_ENCODING       1 
#define ExchangeStatusEnumASN_REQUIRED_BITS_FOR_ENCODING        2
#define ExchangeStatusEnumASN_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define ExchangeStatusEnumASN_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define ExchangeStatusEnumASN_REQUIRED_BYTES_FOR_XER_ENCODING   72

void ExchangeStatusEnumASN_Initialize(ExchangeStatusEnumASN* pVal);
flag ExchangeStatusEnumASN_IsConstraintValid(const ExchangeStatusEnumASN* val, int* pErrCode);
#ifndef ERR_ExchangeStatusEnumASN_unknown_enumeration_value 
#define ERR_ExchangeStatusEnumASN_unknown_enumeration_value		1004  /**/
#endif
#ifndef ERR_ExchangeStatusEnumASN 
#define ERR_ExchangeStatusEnumASN		1003  /**/
#endif

typedef struct {
    ExchangeStatusEnumASN status;
} ExchangeStatusASN;

#define ExchangeStatusASN_REQUIRED_BYTES_FOR_ENCODING       1 
#define ExchangeStatusASN_REQUIRED_BITS_FOR_ENCODING        2
#define ExchangeStatusASN_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define ExchangeStatusASN_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define ExchangeStatusASN_REQUIRED_BYTES_FOR_XER_ENCODING   81

void ExchangeStatusASN_Initialize(ExchangeStatusASN* pVal);
flag ExchangeStatusASN_IsConstraintValid(const ExchangeStatusASN* val, int* pErrCode);


typedef struct {
} LogMsgASN;

#define LogMsgASN_REQUIRED_BYTES_FOR_ENCODING       0 
#define LogMsgASN_REQUIRED_BITS_FOR_ENCODING        0
#define LogMsgASN_REQUIRED_BYTES_FOR_ACN_ENCODING   0 
#define LogMsgASN_REQUIRED_BITS_FOR_ACN_ENCODING    0
#define LogMsgASN_REQUIRED_BYTES_FOR_XER_ENCODING   23

void LogMsgASN_Initialize(LogMsgASN* pVal);
flag LogMsgASN_IsConstraintValid(const LogMsgASN* val, int* pErrCode);


typedef asn1SccUint LogASN_logIndex;

#define LogASN_logIndex_REQUIRED_BYTES_FOR_ENCODING       4 
#define LogASN_logIndex_REQUIRED_BITS_FOR_ENCODING        32
#define LogASN_logIndex_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define LogASN_logIndex_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define LogASN_logIndex_REQUIRED_BYTES_FOR_XER_ENCODING   55

void LogASN_logIndex_Initialize(LogASN_logIndex* pVal);
flag LogASN_logIndex_IsConstraintValid(const LogASN_logIndex* val, int* pErrCode);
#ifndef ERR_LogASN_logIndex 
#define ERR_LogASN_logIndex		1005  /*(0 .. 4294967295)*/
#endif

typedef struct {    
    byte arr[128];
} LogASN_logDescription;

#define LogASN_logDescription_REQUIRED_BYTES_FOR_ENCODING       128 
#define LogASN_logDescription_REQUIRED_BITS_FOR_ENCODING        1024
#define LogASN_logDescription_REQUIRED_BYTES_FOR_ACN_ENCODING   128 
#define LogASN_logDescription_REQUIRED_BITS_FOR_ACN_ENCODING    1024
#define LogASN_logDescription_REQUIRED_BYTES_FOR_XER_ENCODING   303

void LogASN_logDescription_Initialize(LogASN_logDescription* pVal);
flag LogASN_logDescription_IsConstraintValid(const LogASN_logDescription* val, int* pErrCode);
#ifndef ERR_LogASN_logDescription 
#define ERR_LogASN_logDescription		1006  /*(SIZE(128))*/
#endif

typedef struct {    
    byte arr[128];
} LogStringValueASN_stringValue;

#define LogStringValueASN_stringValue_REQUIRED_BYTES_FOR_ENCODING       128 
#define LogStringValueASN_stringValue_REQUIRED_BITS_FOR_ENCODING        1024
#define LogStringValueASN_stringValue_REQUIRED_BYTES_FOR_ACN_ENCODING   128 
#define LogStringValueASN_stringValue_REQUIRED_BITS_FOR_ACN_ENCODING    1024
#define LogStringValueASN_stringValue_REQUIRED_BYTES_FOR_XER_ENCODING   319

void LogStringValueASN_stringValue_Initialize(LogStringValueASN_stringValue* pVal);
flag LogStringValueASN_stringValue_IsConstraintValid(const LogStringValueASN_stringValue* val, int* pErrCode);
#ifndef ERR_LogStringValueASN_stringValue 
#define ERR_LogStringValueASN_stringValue		1007  /*(SIZE(128))*/
#endif

typedef struct {
    LogStringValueASN_stringValue stringValue;
} LogStringValueASN;

#define LogStringValueASN_REQUIRED_BYTES_FOR_ENCODING       128 
#define LogStringValueASN_REQUIRED_BITS_FOR_ENCODING        1024
#define LogStringValueASN_REQUIRED_BYTES_FOR_ACN_ENCODING   128 
#define LogStringValueASN_REQUIRED_BITS_FOR_ACN_ENCODING    1024
#define LogStringValueASN_REQUIRED_BYTES_FOR_XER_ENCODING   322

void LogStringValueASN_Initialize(LogStringValueASN* pVal);
flag LogStringValueASN_IsConstraintValid(const LogStringValueASN* val, int* pErrCode);


typedef asn1SccUint LogIntValueASN_intValue;

#define LogIntValueASN_intValue_REQUIRED_BYTES_FOR_ENCODING       4 
#define LogIntValueASN_intValue_REQUIRED_BITS_FOR_ENCODING        32
#define LogIntValueASN_intValue_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define LogIntValueASN_intValue_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define LogIntValueASN_intValue_REQUIRED_BYTES_FOR_XER_ENCODING   71

void LogIntValueASN_intValue_Initialize(LogIntValueASN_intValue* pVal);
flag LogIntValueASN_intValue_IsConstraintValid(const LogIntValueASN_intValue* val, int* pErrCode);
#ifndef ERR_LogIntValueASN_intValue 
#define ERR_LogIntValueASN_intValue		1008  /*(0 .. 4294967295)*/
#endif

typedef struct {
    LogIntValueASN_intValue intValue;
} LogIntValueASN;

#define LogIntValueASN_REQUIRED_BYTES_FOR_ENCODING       4 
#define LogIntValueASN_REQUIRED_BITS_FOR_ENCODING        32
#define LogIntValueASN_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define LogIntValueASN_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define LogIntValueASN_REQUIRED_BYTES_FOR_XER_ENCODING   74

void LogIntValueASN_Initialize(LogIntValueASN* pVal);
flag LogIntValueASN_IsConstraintValid(const LogIntValueASN* val, int* pErrCode);


typedef struct {
    enum {
        LogChoiceASN_NONE,
        logMsg_PRESENT,
        logIntValue_PRESENT,
        logStringValue_PRESENT 
    } kind;
    union {
        LogMsgASN logMsg;
        LogIntValueASN logIntValue;
        LogStringValueASN logStringValue;
    } u; 
} LogChoiceASN;

#define LogChoiceASN_REQUIRED_BYTES_FOR_ENCODING       129 
#define LogChoiceASN_REQUIRED_BITS_FOR_ENCODING        1026
#define LogChoiceASN_REQUIRED_BYTES_FOR_ACN_ENCODING   129 
#define LogChoiceASN_REQUIRED_BITS_FOR_ACN_ENCODING    1026
#define LogChoiceASN_REQUIRED_BYTES_FOR_XER_ENCODING   345

void LogChoiceASN_Initialize(LogChoiceASN* pVal);
flag LogChoiceASN_IsConstraintValid(const LogChoiceASN* val, int* pErrCode);
#ifndef ERR_LogChoiceASN_unknown_choice_index 
#define ERR_LogChoiceASN_unknown_choice_index		1009  /**/
#endif

typedef struct {
    LogASN_logDescription logDescription;
    LogChoiceASN logChoice;
    LogASN_logIndex logIndex;
} LogASN;

#define LogASN_REQUIRED_BYTES_FOR_ENCODING       261 
#define LogASN_REQUIRED_BITS_FOR_ENCODING        2082
#define LogASN_REQUIRED_BYTES_FOR_ACN_ENCODING   261 
#define LogASN_REQUIRED_BITS_FOR_ACN_ENCODING    2082
#define LogASN_REQUIRED_BYTES_FOR_XER_ENCODING   686

void LogASN_Initialize(LogASN* pVal);
flag LogASN_IsConstraintValid(const LogASN* val, int* pErrCode);


typedef asn1SccUint InjectionConfigurationASN_memoryInjectionActionsNum;

#define InjectionConfigurationASN_memoryInjectionActionsNum_REQUIRED_BYTES_FOR_ENCODING       4 
#define InjectionConfigurationASN_memoryInjectionActionsNum_REQUIRED_BITS_FOR_ENCODING        32
#define InjectionConfigurationASN_memoryInjectionActionsNum_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define InjectionConfigurationASN_memoryInjectionActionsNum_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define InjectionConfigurationASN_memoryInjectionActionsNum_REQUIRED_BYTES_FOR_XER_ENCODING   127

void InjectionConfigurationASN_memoryInjectionActionsNum_Initialize(InjectionConfigurationASN_memoryInjectionActionsNum* pVal);
flag InjectionConfigurationASN_memoryInjectionActionsNum_IsConstraintValid(const InjectionConfigurationASN_memoryInjectionActionsNum* val, int* pErrCode);
#ifndef ERR_InjectionConfigurationASN_memoryInjectionActionsNum 
#define ERR_InjectionConfigurationASN_memoryInjectionActionsNum		1010  /*(0 .. 4294967295)*/
#endif

typedef asn1SccUint InjectionConfigurationASN_registerInjectionActionsNum;

#define InjectionConfigurationASN_registerInjectionActionsNum_REQUIRED_BYTES_FOR_ENCODING       4 
#define InjectionConfigurationASN_registerInjectionActionsNum_REQUIRED_BITS_FOR_ENCODING        32
#define InjectionConfigurationASN_registerInjectionActionsNum_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define InjectionConfigurationASN_registerInjectionActionsNum_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define InjectionConfigurationASN_registerInjectionActionsNum_REQUIRED_BYTES_FOR_XER_ENCODING   131

void InjectionConfigurationASN_registerInjectionActionsNum_Initialize(InjectionConfigurationASN_registerInjectionActionsNum* pVal);
flag InjectionConfigurationASN_registerInjectionActionsNum_IsConstraintValid(const InjectionConfigurationASN_registerInjectionActionsNum* val, int* pErrCode);
#ifndef ERR_InjectionConfigurationASN_registerInjectionActionsNum 
#define ERR_InjectionConfigurationASN_registerInjectionActionsNum		1011  /*(0 .. 4294967295)*/
#endif

typedef asn1SccUint InjectionConfigurationASN_injectionActionsNum;

#define InjectionConfigurationASN_injectionActionsNum_REQUIRED_BYTES_FOR_ENCODING       4 
#define InjectionConfigurationASN_injectionActionsNum_REQUIRED_BITS_FOR_ENCODING        32
#define InjectionConfigurationASN_injectionActionsNum_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define InjectionConfigurationASN_injectionActionsNum_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define InjectionConfigurationASN_injectionActionsNum_REQUIRED_BYTES_FOR_XER_ENCODING   115

void InjectionConfigurationASN_injectionActionsNum_Initialize(InjectionConfigurationASN_injectionActionsNum* pVal);
flag InjectionConfigurationASN_injectionActionsNum_IsConstraintValid(const InjectionConfigurationASN_injectionActionsNum* val, int* pErrCode);
#ifndef ERR_InjectionConfigurationASN_injectionActionsNum 
#define ERR_InjectionConfigurationASN_injectionActionsNum		1012  /*(0 .. 4294967295)*/
#endif

typedef struct {
    flag logging;
    InjectionConfigurationASN_injectionActionsNum injectionActionsNum;
    InjectionConfigurationASN_registerInjectionActionsNum registerInjectionActionsNum;
    InjectionConfigurationASN_memoryInjectionActionsNum memoryInjectionActionsNum;
} InjectionConfigurationASN;

#define InjectionConfigurationASN_REQUIRED_BYTES_FOR_ENCODING       13 
#define InjectionConfigurationASN_REQUIRED_BITS_FOR_ENCODING        97
#define InjectionConfigurationASN_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define InjectionConfigurationASN_REQUIRED_BITS_FOR_ACN_ENCODING    97
#define InjectionConfigurationASN_REQUIRED_BYTES_FOR_XER_ENCODING   304

void InjectionConfigurationASN_Initialize(InjectionConfigurationASN* pVal);
flag InjectionConfigurationASN_IsConstraintValid(const InjectionConfigurationASN* val, int* pErrCode);


typedef asn1SccUint InjectionActionASN_injectionActionIndex;

#define InjectionActionASN_injectionActionIndex_REQUIRED_BYTES_FOR_ENCODING       4 
#define InjectionActionASN_injectionActionIndex_REQUIRED_BITS_FOR_ENCODING        32
#define InjectionActionASN_injectionActionIndex_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define InjectionActionASN_injectionActionIndex_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define InjectionActionASN_injectionActionIndex_REQUIRED_BYTES_FOR_XER_ENCODING   103

void InjectionActionASN_injectionActionIndex_Initialize(InjectionActionASN_injectionActionIndex* pVal);
flag InjectionActionASN_injectionActionIndex_IsConstraintValid(const InjectionActionASN_injectionActionIndex* val, int* pErrCode);
#ifndef ERR_InjectionActionASN_injectionActionIndex 
#define ERR_InjectionActionASN_injectionActionIndex		1013  /*(0 .. 4294967295)*/
#endif

typedef asn1SccUint MemoryInjectionActionASN_omitCallsNumber;

#define MemoryInjectionActionASN_omitCallsNumber_REQUIRED_BYTES_FOR_ENCODING       4 
#define MemoryInjectionActionASN_omitCallsNumber_REQUIRED_BITS_FOR_ENCODING        32
#define MemoryInjectionActionASN_omitCallsNumber_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define MemoryInjectionActionASN_omitCallsNumber_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define MemoryInjectionActionASN_omitCallsNumber_REQUIRED_BYTES_FOR_XER_ENCODING   105

void MemoryInjectionActionASN_omitCallsNumber_Initialize(MemoryInjectionActionASN_omitCallsNumber* pVal);
flag MemoryInjectionActionASN_omitCallsNumber_IsConstraintValid(const MemoryInjectionActionASN_omitCallsNumber* val, int* pErrCode);
#ifndef ERR_MemoryInjectionActionASN_omitCallsNumber 
#define ERR_MemoryInjectionActionASN_omitCallsNumber		1014  /*(0 .. 4294967295)*/
#endif

typedef asn1SccUint MemoryInjectionActionASN_valueMask;

#define MemoryInjectionActionASN_valueMask_REQUIRED_BYTES_FOR_ENCODING       4 
#define MemoryInjectionActionASN_valueMask_REQUIRED_BITS_FOR_ENCODING        32
#define MemoryInjectionActionASN_valueMask_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define MemoryInjectionActionASN_valueMask_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define MemoryInjectionActionASN_valueMask_REQUIRED_BYTES_FOR_XER_ENCODING   93

void MemoryInjectionActionASN_valueMask_Initialize(MemoryInjectionActionASN_valueMask* pVal);
flag MemoryInjectionActionASN_valueMask_IsConstraintValid(const MemoryInjectionActionASN_valueMask* val, int* pErrCode);
#ifndef ERR_MemoryInjectionActionASN_valueMask 
#define ERR_MemoryInjectionActionASN_valueMask		1015  /*(0 .. 4294967295)*/
#endif

typedef asn1SccUint MemoryInjectionActionASN_memoryAddress;

#define MemoryInjectionActionASN_memoryAddress_REQUIRED_BYTES_FOR_ENCODING       4 
#define MemoryInjectionActionASN_memoryAddress_REQUIRED_BITS_FOR_ENCODING        32
#define MemoryInjectionActionASN_memoryAddress_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define MemoryInjectionActionASN_memoryAddress_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define MemoryInjectionActionASN_memoryAddress_REQUIRED_BYTES_FOR_XER_ENCODING   101

void MemoryInjectionActionASN_memoryAddress_Initialize(MemoryInjectionActionASN_memoryAddress* pVal);
flag MemoryInjectionActionASN_memoryAddress_IsConstraintValid(const MemoryInjectionActionASN_memoryAddress* val, int* pErrCode);
#ifndef ERR_MemoryInjectionActionASN_memoryAddress 
#define ERR_MemoryInjectionActionASN_memoryAddress		1016  /*(0 .. 4294967295)*/
#endif

typedef asn1SccUint MemoryInjectionActionASN_injectionAddress;

#define MemoryInjectionActionASN_injectionAddress_REQUIRED_BYTES_FOR_ENCODING       4 
#define MemoryInjectionActionASN_injectionAddress_REQUIRED_BITS_FOR_ENCODING        32
#define MemoryInjectionActionASN_injectionAddress_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define MemoryInjectionActionASN_injectionAddress_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define MemoryInjectionActionASN_injectionAddress_REQUIRED_BYTES_FOR_XER_ENCODING   107

void MemoryInjectionActionASN_injectionAddress_Initialize(MemoryInjectionActionASN_injectionAddress* pVal);
flag MemoryInjectionActionASN_injectionAddress_IsConstraintValid(const MemoryInjectionActionASN_injectionAddress* val, int* pErrCode);
#ifndef ERR_MemoryInjectionActionASN_injectionAddress 
#define ERR_MemoryInjectionActionASN_injectionAddress		1017  /*(0 .. 4294967295)*/
#endif

typedef struct {
    MemoryInjectionActionASN_injectionAddress injectionAddress;
    MemoryInjectionActionASN_memoryAddress memoryAddress;
    MemoryInjectionActionASN_valueMask valueMask;
    MemoryInjectionActionASN_omitCallsNumber omitCallsNumber;
    MaskOperationASN maskOperation;
} MemoryInjectionActionASN;

#define MemoryInjectionActionASN_REQUIRED_BYTES_FOR_ENCODING       17 
#define MemoryInjectionActionASN_REQUIRED_BITS_FOR_ENCODING        130
#define MemoryInjectionActionASN_REQUIRED_BYTES_FOR_ACN_ENCODING   17 
#define MemoryInjectionActionASN_REQUIRED_BITS_FOR_ACN_ENCODING    130
#define MemoryInjectionActionASN_REQUIRED_BYTES_FOR_XER_ENCODING   317

void MemoryInjectionActionASN_Initialize(MemoryInjectionActionASN* pVal);
flag MemoryInjectionActionASN_IsConstraintValid(const MemoryInjectionActionASN* val, int* pErrCode);


typedef asn1SccUint RegisterInjectionActionASN_omitCallsNumber;

#define RegisterInjectionActionASN_omitCallsNumber_REQUIRED_BYTES_FOR_ENCODING       4 
#define RegisterInjectionActionASN_omitCallsNumber_REQUIRED_BITS_FOR_ENCODING        32
#define RegisterInjectionActionASN_omitCallsNumber_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define RegisterInjectionActionASN_omitCallsNumber_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define RegisterInjectionActionASN_omitCallsNumber_REQUIRED_BYTES_FOR_XER_ENCODING   109

void RegisterInjectionActionASN_omitCallsNumber_Initialize(RegisterInjectionActionASN_omitCallsNumber* pVal);
flag RegisterInjectionActionASN_omitCallsNumber_IsConstraintValid(const RegisterInjectionActionASN_omitCallsNumber* val, int* pErrCode);
#ifndef ERR_RegisterInjectionActionASN_omitCallsNumber 
#define ERR_RegisterInjectionActionASN_omitCallsNumber		1018  /*(0 .. 4294967295)*/
#endif

typedef asn1SccUint RegisterInjectionActionASN_valueMask;

#define RegisterInjectionActionASN_valueMask_REQUIRED_BYTES_FOR_ENCODING       4 
#define RegisterInjectionActionASN_valueMask_REQUIRED_BITS_FOR_ENCODING        32
#define RegisterInjectionActionASN_valueMask_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define RegisterInjectionActionASN_valueMask_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define RegisterInjectionActionASN_valueMask_REQUIRED_BYTES_FOR_XER_ENCODING   97

void RegisterInjectionActionASN_valueMask_Initialize(RegisterInjectionActionASN_valueMask* pVal);
flag RegisterInjectionActionASN_valueMask_IsConstraintValid(const RegisterInjectionActionASN_valueMask* val, int* pErrCode);
#ifndef ERR_RegisterInjectionActionASN_valueMask 
#define ERR_RegisterInjectionActionASN_valueMask		1019  /*(0 .. 4294967295)*/
#endif

typedef asn1SccUint RegisterInjectionActionASN_registerIndex;

#define RegisterInjectionActionASN_registerIndex_REQUIRED_BYTES_FOR_ENCODING       1 
#define RegisterInjectionActionASN_registerIndex_REQUIRED_BITS_FOR_ENCODING        4
#define RegisterInjectionActionASN_registerIndex_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define RegisterInjectionActionASN_registerIndex_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define RegisterInjectionActionASN_registerIndex_REQUIRED_BYTES_FOR_XER_ENCODING   105

void RegisterInjectionActionASN_registerIndex_Initialize(RegisterInjectionActionASN_registerIndex* pVal);
flag RegisterInjectionActionASN_registerIndex_IsConstraintValid(const RegisterInjectionActionASN_registerIndex* val, int* pErrCode);
#ifndef ERR_RegisterInjectionActionASN_registerIndex 
#define ERR_RegisterInjectionActionASN_registerIndex		1020  /*(0 .. 15)*/
#endif

typedef asn1SccUint RegisterInjectionActionASN_injectionAddress;

#define RegisterInjectionActionASN_injectionAddress_REQUIRED_BYTES_FOR_ENCODING       4 
#define RegisterInjectionActionASN_injectionAddress_REQUIRED_BITS_FOR_ENCODING        32
#define RegisterInjectionActionASN_injectionAddress_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define RegisterInjectionActionASN_injectionAddress_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define RegisterInjectionActionASN_injectionAddress_REQUIRED_BYTES_FOR_XER_ENCODING   111

void RegisterInjectionActionASN_injectionAddress_Initialize(RegisterInjectionActionASN_injectionAddress* pVal);
flag RegisterInjectionActionASN_injectionAddress_IsConstraintValid(const RegisterInjectionActionASN_injectionAddress* val, int* pErrCode);
#ifndef ERR_RegisterInjectionActionASN_injectionAddress 
#define ERR_RegisterInjectionActionASN_injectionAddress		1021  /*(0 .. 4294967295)*/
#endif

typedef struct {
    RegisterInjectionActionASN_injectionAddress injectionAddress;
    RegisterInjectionActionASN_registerIndex registerIndex;
    RegisterInjectionActionASN_valueMask valueMask;
    RegisterInjectionActionASN_omitCallsNumber omitCallsNumber;
    MaskOperationASN maskOperation;
} RegisterInjectionActionASN;

#define RegisterInjectionActionASN_REQUIRED_BYTES_FOR_ENCODING       13 
#define RegisterInjectionActionASN_REQUIRED_BITS_FOR_ENCODING        102
#define RegisterInjectionActionASN_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define RegisterInjectionActionASN_REQUIRED_BITS_FOR_ACN_ENCODING    102
#define RegisterInjectionActionASN_REQUIRED_BYTES_FOR_XER_ENCODING   321

void RegisterInjectionActionASN_Initialize(RegisterInjectionActionASN* pVal);
flag RegisterInjectionActionASN_IsConstraintValid(const RegisterInjectionActionASN* val, int* pErrCode);


typedef struct {
    enum {
        InjectionActionChoiceASN_NONE,
        registerAction_PRESENT,
        memoryAction_PRESENT 
    } kind;
    union {
        RegisterInjectionActionASN registerAction;
        MemoryInjectionActionASN memoryAction;
    } u; 
} InjectionActionChoiceASN;

#define InjectionActionChoiceASN_REQUIRED_BYTES_FOR_ENCODING       17 
#define InjectionActionChoiceASN_REQUIRED_BITS_FOR_ENCODING        132
#define InjectionActionChoiceASN_REQUIRED_BYTES_FOR_ACN_ENCODING   17 
#define InjectionActionChoiceASN_REQUIRED_BITS_FOR_ACN_ENCODING    132
#define InjectionActionChoiceASN_REQUIRED_BYTES_FOR_XER_ENCODING   350

void InjectionActionChoiceASN_Initialize(InjectionActionChoiceASN* pVal);
flag InjectionActionChoiceASN_IsConstraintValid(const InjectionActionChoiceASN* val, int* pErrCode);
#ifndef ERR_InjectionActionChoiceASN_unknown_choice_index 
#define ERR_InjectionActionChoiceASN_unknown_choice_index		1022  /**/
#endif

typedef struct {
    InjectionActionChoiceASN injectionAction;
    InjectionActionASN_injectionActionIndex injectionActionIndex;
} InjectionActionASN;

#define InjectionActionASN_REQUIRED_BYTES_FOR_ENCODING       21 
#define InjectionActionASN_REQUIRED_BITS_FOR_ENCODING        164
#define InjectionActionASN_REQUIRED_BYTES_FOR_ACN_ENCODING   21 
#define InjectionActionASN_REQUIRED_BITS_FOR_ACN_ENCODING    164
#define InjectionActionASN_REQUIRED_BYTES_FOR_XER_ENCODING   438

void InjectionActionASN_Initialize(InjectionActionASN* pVal);
flag InjectionActionASN_IsConstraintValid(const InjectionActionASN* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag MaskOperationASN_Encode(const MaskOperationASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MaskOperationASN_Decode(MaskOperationASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag ExchangeStatusEnumASN_Encode(const ExchangeStatusEnumASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ExchangeStatusEnumASN_Decode(ExchangeStatusEnumASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag ExchangeStatusASN_Encode(const ExchangeStatusASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ExchangeStatusASN_Decode(ExchangeStatusASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogMsgASN_Encode(const LogMsgASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogMsgASN_Decode(LogMsgASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogASN_logIndex_Encode(const LogASN_logIndex* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogASN_logIndex_Decode(LogASN_logIndex* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogASN_logDescription_Encode(const LogASN_logDescription* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogASN_logDescription_Decode(LogASN_logDescription* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogStringValueASN_stringValue_Encode(const LogStringValueASN_stringValue* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogStringValueASN_stringValue_Decode(LogStringValueASN_stringValue* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogStringValueASN_Encode(const LogStringValueASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogStringValueASN_Decode(LogStringValueASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogIntValueASN_intValue_Encode(const LogIntValueASN_intValue* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogIntValueASN_intValue_Decode(LogIntValueASN_intValue* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogIntValueASN_Encode(const LogIntValueASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogIntValueASN_Decode(LogIntValueASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogChoiceASN_Encode(const LogChoiceASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogChoiceASN_Decode(LogChoiceASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag LogASN_Encode(const LogASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LogASN_Decode(LogASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag InjectionConfigurationASN_memoryInjectionActionsNum_Encode(const InjectionConfigurationASN_memoryInjectionActionsNum* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InjectionConfigurationASN_memoryInjectionActionsNum_Decode(InjectionConfigurationASN_memoryInjectionActionsNum* pVal, BitStream* pBitStrm, int* pErrCode);
flag InjectionConfigurationASN_registerInjectionActionsNum_Encode(const InjectionConfigurationASN_registerInjectionActionsNum* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InjectionConfigurationASN_registerInjectionActionsNum_Decode(InjectionConfigurationASN_registerInjectionActionsNum* pVal, BitStream* pBitStrm, int* pErrCode);
flag InjectionConfigurationASN_injectionActionsNum_Encode(const InjectionConfigurationASN_injectionActionsNum* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InjectionConfigurationASN_injectionActionsNum_Decode(InjectionConfigurationASN_injectionActionsNum* pVal, BitStream* pBitStrm, int* pErrCode);
flag InjectionConfigurationASN_Encode(const InjectionConfigurationASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InjectionConfigurationASN_Decode(InjectionConfigurationASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag InjectionActionASN_injectionActionIndex_Encode(const InjectionActionASN_injectionActionIndex* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InjectionActionASN_injectionActionIndex_Decode(InjectionActionASN_injectionActionIndex* pVal, BitStream* pBitStrm, int* pErrCode);
flag MemoryInjectionActionASN_omitCallsNumber_Encode(const MemoryInjectionActionASN_omitCallsNumber* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MemoryInjectionActionASN_omitCallsNumber_Decode(MemoryInjectionActionASN_omitCallsNumber* pVal, BitStream* pBitStrm, int* pErrCode);
flag MemoryInjectionActionASN_valueMask_Encode(const MemoryInjectionActionASN_valueMask* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MemoryInjectionActionASN_valueMask_Decode(MemoryInjectionActionASN_valueMask* pVal, BitStream* pBitStrm, int* pErrCode);
flag MemoryInjectionActionASN_memoryAddress_Encode(const MemoryInjectionActionASN_memoryAddress* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MemoryInjectionActionASN_memoryAddress_Decode(MemoryInjectionActionASN_memoryAddress* pVal, BitStream* pBitStrm, int* pErrCode);
flag MemoryInjectionActionASN_injectionAddress_Encode(const MemoryInjectionActionASN_injectionAddress* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MemoryInjectionActionASN_injectionAddress_Decode(MemoryInjectionActionASN_injectionAddress* pVal, BitStream* pBitStrm, int* pErrCode);
flag MemoryInjectionActionASN_Encode(const MemoryInjectionActionASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MemoryInjectionActionASN_Decode(MemoryInjectionActionASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag RegisterInjectionActionASN_omitCallsNumber_Encode(const RegisterInjectionActionASN_omitCallsNumber* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag RegisterInjectionActionASN_omitCallsNumber_Decode(RegisterInjectionActionASN_omitCallsNumber* pVal, BitStream* pBitStrm, int* pErrCode);
flag RegisterInjectionActionASN_valueMask_Encode(const RegisterInjectionActionASN_valueMask* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag RegisterInjectionActionASN_valueMask_Decode(RegisterInjectionActionASN_valueMask* pVal, BitStream* pBitStrm, int* pErrCode);
flag RegisterInjectionActionASN_registerIndex_Encode(const RegisterInjectionActionASN_registerIndex* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag RegisterInjectionActionASN_registerIndex_Decode(RegisterInjectionActionASN_registerIndex* pVal, BitStream* pBitStrm, int* pErrCode);
flag RegisterInjectionActionASN_injectionAddress_Encode(const RegisterInjectionActionASN_injectionAddress* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag RegisterInjectionActionASN_injectionAddress_Decode(RegisterInjectionActionASN_injectionAddress* pVal, BitStream* pBitStrm, int* pErrCode);
flag RegisterInjectionActionASN_Encode(const RegisterInjectionActionASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag RegisterInjectionActionASN_Decode(RegisterInjectionActionASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag InjectionActionChoiceASN_Encode(const InjectionActionChoiceASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InjectionActionChoiceASN_Decode(InjectionActionChoiceASN* pVal, BitStream* pBitStrm, int* pErrCode);
flag InjectionActionASN_Encode(const InjectionActionASN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InjectionActionASN_Decode(InjectionActionASN* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_setOperation	setOperation
#define ENUM_xorOperation	xorOperation
#define ENUM_orOperation	orOperation
#define ENUM_waitingConf	waitingConf
#define ENUM_sendingActions	sendingActions
#define ENUM_actionsReceived	actionsReceived
#define CHOICE_logMsg_PRESENT	LogChoiceASN::logMsg_PRESENT
#define CHOICE_logIntValue_PRESENT	LogChoiceASN::logIntValue_PRESENT
#define CHOICE_logStringValue_PRESENT	LogChoiceASN::logStringValue_PRESENT
#define CHOICE_registerAction_PRESENT	InjectionActionChoiceASN::registerAction_PRESENT
#define CHOICE_memoryAction_PRESENT	InjectionActionChoiceASN::memoryAction_PRESENT

#endif

#endif
